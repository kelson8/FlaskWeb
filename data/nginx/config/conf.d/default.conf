server {
    listen 80;
    server_name localhost;  # Change to your domain in production

    location /static {
        alias /app/static;  # Path to static files in the container
    }

    location /media {
        alias /app/media;  # Path to media files in the container
    }

    # Handle 403 and 404 errors by sending to Flask
    error_page 403 = @handle_error;
    error_page 404 = @handle_error;

    # location @handle_error {
    # proxy_pass http://web:81;  # Forward errors to Flask
    # proxy_set_header Host $host;
    # proxy_set_header X-Real-IP $remote_addr;
    # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header X-Forwarded-Proto $scheme;
    # proxy_set_header CF-Connecting-IP $remote_addr;  # Cloudflare header
    # }

    location @handle_error {
        proxy_pass http://web:81;  # Forward errors to Flask
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;  # This will be Cloudflareâ€™s IP if not properly configured
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Pass the original IP
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    # location / {
    #     proxy_pass http://web:81;  # Name of the Flask service in Docker
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the original IP
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_set_header CF-Connecting-IP $remote_addr;  # Cloudflare header
    # }

    
    location / {
        proxy_pass http://web:81;  # Name of your Flask service in Docker
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;  # This needs to show the original IP now
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

}